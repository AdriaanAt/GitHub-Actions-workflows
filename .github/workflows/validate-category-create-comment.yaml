name: Category Validation - Comment on the pull request

# read-write repo token
# access to secrets
on:
  workflow_run:
    workflows: ["Validate Categories on PR"]
    types:
      - completed

jobs:
  comment:
    runs-on: ubuntu-latest
    if: >
      ${{ github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: 'Download artifact'
        uses: actions/github-script@v3.1.0
        id: download-artifact
        with:
          script: |
            try {
              var artifacts = await github.actions.listWorkflowRunArtifacts({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 run_id: ${{github.event.workflow_run.id }},
              });
              var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
                return artifact.name == "category_validation"
              })[0];
              if(matchArtifact) {
                var download = await github.actions.downloadArtifact({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 artifact_id: matchArtifact.id,
                 archive_format: 'zip',
                });
                var fs = require('fs');
                fs.writeFileSync('${{github.workspace}}/category_validation.zip', Buffer.from(download.data));
                console.log("::set-output name=artifact-exists::true")
              }
            } catch (error) {
                  console.error(error);
            }
            
      - run: unzip category_validation.zip
        if: ${{steps.download-artifact.outputs.artifact-exists == 'true' }}

      - name: 'Comment on PR'
        if: ${{steps.download-artifact.outputs.artifact-exists == 'true' }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            var fs = require('fs');
            var issue_number = Number(fs.readFileSync('./issue_number'));
            console.log(issue_number)
            var output = fs.readFileSync('./output', 'utf8')
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: output
            });
